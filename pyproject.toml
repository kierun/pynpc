# Modified from poetry to uvâ€¦ What could go right?

[tool.isort]
profile = "black"
line_length = 120
known_third_party = [
    "click",
    "click_help_colors",
    "distro",
    "gnupg",
    "google",
    "pendulum",
    "plumbum",
    "pytest",
    "requests",
    "requests_mock",
    "rich",
    "ruamel",
    "semver",
    "sha256sum",
    "structlog",
]

[tool.mypy]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
exclude = ['\.venv', 'tests']
enable_error_code = ['ignore-without-code']

[tool.mypy-google.cloud]
ignore_missing_imports = "True"

[tool.pytest.ini_options]
log_auto_indent = true
#log_cli = true
#log_cli_level = "ERROR"
#log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
#log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

junit_duration_report = "total"
addopts = "-rA --junit-xml=pytest.xml --last-failed"

[tool.coverage.run]
parallel = true
branch = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "uv build"

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.pydocstyle]
match-dir = "pynpc"

[tool.ruff]
line-length = 120
lint.select = [
    "F",      # Pyflakes (F)
    "W",      # Warning (W)
    "E",      # Error (E)
    "C90",    # mccabe (C90)
    "I",      # isort (I)
    "N",      # pep8-naming (N)
    "D",      # pydocstyle (D)
    "UP",     # pyupgrade (UP)
    "YTT",    # flake8-2020 (YTT)
    "ANN",    # flake8-annotations (ANN)
    "ASYNC",  # flake8-async (ASYNC)
    "ASYNC1", # flake8-trio (TRIO)
    "S",      # flake8-bandit (S)
    "BLE",    # flake8-blind-except (BLE)
    "B",      # flake8-bugbear (B)
    "A",      # flake8-builtins (A)
    "COM",    # flake8-commas (COM)
    "C4",     # flake8-comprehensions (C4)
    "DTZ",    # flake8-datetimez (DTZ)
    "T10",    # flake8-debugger (T10)
    "DJ",     # flake8-django (DJ)
    "EM",     # flake8-errmsg (EM)
    "EXE",    # flake8-executable (EXE)
    "FA",     # flake8-future-annotations (FA)
    "ISC",    # flake8-implicit-str-concat (ISC)
    "ICN",    # flake8-import-conventions (ICN)
    "G",      # flake8-logging-format (G)
    "INP",    # flake8-no-pep420 (INP)
    "PIE",    # flake8-pie (PIE)
    "T20",    # flake8-print (T20)
    "PYI",    # flake8-pyi (PYI)
    "PT",     # flake8-pytest-style (PT)
    "Q",      # flake8-quotes (Q)
    "RSE",    # flake8-raise (RSE)
    "RET",    # flake8-return (RET)
    "SLF",    # flake8-self (SLF)
    "SLOT",   # flake8-slots (SLOT)
    "SIM",    # flake8-simplify (SIM)
    "TID",    # flake8-tidy-imports (TID)
    "TCH",    # flake8-type-checking (TCH)
    "INT",    # flake8-gettext (INT)
    "ARG",    # flake8-unused-arguments (ARG)
    "PTH",    # flake8-use-pathlib (PTH)
    "TD",     # flake8-todos (TD)
    "FIX",    # flake8-fixme (FIX)
    "ERA",    # eradicate (ERA)
    "PD",     # pandas-vet (PD)
    "PGH",    # pygrep-hooks (PGH)
    "TRY",    # tryceratops (TRY)
    "FLY",    # flynt (FLY)
    "NPY",    # NumPy-specific rules (NPY)
    "AIR",    # Airflow (AIR)
    "PERF",   # Perflint (PERF)
    "FURB",   # refurb (FURB)
    "LOG",    # flake8-logging (LOG)
    "RUF",    # Ruff-specific rules (RUF)
]

# The following is equivalent to --docstring-convention=pep8:
lint.extend-ignore = [
    "D203",
    "D212",
    "D213",
    "D214",
    "D215",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D409",
    "D410",
    "D411",
    "D413",
    "D415",
    "D416",
    "D417",
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in annotations.
    "UP009",  # UTF-8 encoding declaration is unnecessary
    "INP001", # pytest does not want an __init__.py file.
]
# Always autofix, but never try to fix `F401` (unused imports).
#fix = true
lint.unfixable = [
    "F401", # imported but unused.
]
lint.per-file-ignores = { "test_**.py" = ["D100", "D103", "S101", "ANN"] }

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.10.
target-version = "py312"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.flakeheaven]
format = "grouped"
max_line_length = 7.9

[tool.flakeheaven.plugins]
dlint = ["+*"]
# flake8-bandit = ["+*"]
flake8-black = ["+*"]
flake8-comprehensions = ["+*"]
flake8-debugger = ["+*"]
flake8-fixme = ["+*"]
flake8-isort = ["+*"]
flake8-mock = ["+*"]
# flake8-noqa = ["+*"]
flake8-pytest-style = ["+*"]
flake8-secure-coding-standard = ["+*"]
flake8-simplify = ["+*"]
flake8-warnings = ["+*"]

# Match by glob.
[tool.flakeheaven.exceptions."**/test_*.py"]
flake8-secure-coding-standard = ["-SCS108"]

[project]
authors = [{ name = "Dr Yann Golanski", email = "github@kierun.org" }]
license = { text = "MIT" }
requires-python = "<4.0,>=3.10"
dependencies = [
    "rich<14.0.0,>=13.8.0",
    "click<9.0.0,>=8.1.7",
    "click-help-colors<1.0.0,>=0.9.4",
    "pendulum<4.0.0,>=3.0.0",
    "structlog<25.0,>=23.3",
    "requests<3.0.0,>=2.32.3",
    "types-requests<3.0.0.0,>=2.32.0.20240907",
    "orjson<4.0.0,>=3.10.7",
    "mimesis<15.0.0,>=14.0.0",
    "typer<1.0.0,>=0.9.0",
    "typer-config[all]<2.0.0,>=1.4.0",
    "unidecode<2.0.0,>=1.3.8",
]
name = "pynpc"
version = "0.3.0"
description = "Generate simple NPCs for table top role playing games"
keywords = ["ttrpg", "rpg", "generate", "NPC"]
readme = "README.md"

[project.urls]
homepage = "https://github.com/kierun/pynpc"
repository = "https://github.com/kierun/pynpc"

[project.scripts]
pynpc = "pynpc.console:app"

[dependency-groups]
dev = [
    "black<25.0.0,>=23.12.1",
    "isort<6.0.0,>=5.13.2",
    "pytest>=8.3.2",
    "mkdocs<2.0.0,>=1.6.1",
    "mkdocs-material<10.0.0,>=9.5.34",
    "mkdocstrings<1.0.0,>=0.24.0",
    "mypy<2.0.0,>=1.11.2",
    "pre-commit<4.0.0,>=3.8.0",
    "coverage<8.0.0,>=7.6.1",
    "bandit<2.0.0,>=1.7.9",
    "pytest-skip-slow<1.0.0,>=0.0.5",
    "python-semantic-release<10.0.0,>=9.8.8",
    "pytest-cov<5.0.0,>=4.1.0",
    "pydocstyle<7.0.0,>=6.3.0",
    "dlint<1.0.0,>=0.14.1",
    "pytest-sugar<1.0.0,>=0.9.7",
    "requests-mock<2.0.0,>=1.12.1",
    "pdbpp<1.0.0,>=0.10.3",
    "poetry-plugin-up<1.0.0,>=0.7.1",
    "safety<4.0.0,>=3.2.7",
    "ruff>=0.8.4",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
# tool.uv.package = true
