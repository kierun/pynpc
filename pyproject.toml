[tool.poetry]
name = "pynpc"
version = "0.3.0"
description = "Generate simple NPCs for table top role playing games"
authors = ["Dr Yann Golanski <github@kierun.org>"]
keywords = ["ttrpg", "rpg", "generate", "NPC"]
license = "MIT"
homepage = "https://github.com/kierun/pynpc"
repository = "https://github.com/kierun/pynpc"
readme = "README.md"
packages = [{ include = "pynpc" }]
include = ["LICENSE"]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
rich = "^13.7.1"
click = "^8.1.7"
click-help-colors = "^0.9.4"
pendulum = "^3.0.0"
structlog = ">=23.3,<25.0"
requests = "^2.31.0"
types-requests = "^2.31.0.20240406"
orjson = "^3.10.3"
mimesis = "^14.0.0"
typer = { extras = ["all"], version = "^0.9.0" }
typer-config = { extras = ["all"], version = "^1.4.0" }
unidecode = "^1.3.8"

[tool.poetry.group.dev.dependencies]
black = ">=23.12.1,<25.0.0"
isort = "^5.13.2"
pytest = ">=8.2.0"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.21"
mkdocstrings = "^0.24.0"
mypy = "^1.10.0"
pre-commit = "^3.7.0"
coverage = "^7.5.1"
bandit = "^1.7.8"
pytest-skip-slow = "^0.0.5"
commitizen = "^3.25.0"
python-semantic-release = "^8.7.0"
pytest-cov = "^4.1.0"
pydocstyle = "^6.3.0"
ruff = "^0.2.1"
dlint = "^0.14.1"
pytest-sugar = "^0.9.7"
requests-mock = "^1.12.1"
ptpython = "^3.0.26"
pdbpp = "^0.10.3"
poetry-plugin-up = "^0.7.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'
target-version = ['py310']
fast = true
exclude = '''
(
  /(                        # exclude a few common directories in the
    \.git                   # root of the project
    | \.pytest_cache
    | python-venv
    | \.venv
    | build
    | dist
    | \.tox
  ))
'''

[tool.isort]
profile = "black"
line_length = 120
known_third_party = [
    "click",
    "click_help_colors",
    "distro",
    "gnupg",
    "google",
    "pendulum",
    "plumbum",
    "pytest",
    "requests",
    "requests_mock",
    "rich",
    "ruamel",
    "semver",
    "sha256sum",
    "structlog",
]

[tool.mypy]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"
exclude = ['\.venv', 'tests']
enable_error_code = ['ignore-without-code']

[tool.mypy-google.cloud]
ignore_missing_imports = "True"

[tool.poetry.scripts]
pynpc = "pynpc.console:app"

[tool.pytest.ini_options]
log_auto_indent = true

#log_cli = true
#log_cli_level = "ERROR"
#log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
#log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

junit_duration_report = "total"
addopts = "-rA --junit-xml=pytest.xml --last-failed"

[tool.coverage.run]
parallel = true
branch = true

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.pydocstyle]
match-dir = "pynpc"

[tool.ruff]
line-length = 120
lint.select = [

    "F",     # Pyflakes (F)
    "W",     # Warning (W)
    "E",     # Error (E)
    "C90",   # mccabe (C90)
    "I",     # isort (I)
    "N",     # pep8-naming (N)
    "D",     # pydocstyle (D)
    "UP",    # pyupgrade (UP)
    "YTT",   # flake8-2020 (YTT)
    "ANN",   # flake8-annotations (ANN)
    "ASYNC", # flake8-async (ASYNC)
    "TRIO",  # flake8-trio (TRIO)
    "S",     # flake8-bandit (S)
    "BLE",   # flake8-blind-except (BLE)
    #  "FBT",    # flake8-boolean-trap (FBT) Why? ¯\_(ツ)_/¯
    "B",    # flake8-bugbear (B)
    "A",    # flake8-builtins (A)
    "COM",  # flake8-commas (COM)
    "CPY",  # flake8-copyright (CPY)
    "C4",   # flake8-comprehensions (C4)
    "DTZ",  # flake8-datetimez (DTZ)
    "T10",  # flake8-debugger (T10)
    "DJ",   # flake8-django (DJ)
    "EM",   # flake8-errmsg (EM)
    "EXE",  # flake8-executable (EXE)
    "FA",   # flake8-future-annotations (FA)
    "ISC",  # flake8-implicit-str-concat (ISC)
    "ICN",  # flake8-import-conventions (ICN)
    "G",    # flake8-logging-format (G)
    "INP",  # flake8-no-pep420 (INP)
    "PIE",  # flake8-pie (PIE)
    "T20",  # flake8-print (T20)
    "PYI",  # flake8-pyi (PYI)
    "PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    "RSE",  # flake8-raise (RSE)
    "RET",  # flake8-return (RET)
    "SLF",  # flake8-self (SLF)
    "SLOT", # flake8-slots (SLOT)
    "SIM",  # flake8-simplify (SIM)
    "TID",  # flake8-tidy-imports (TID)
    "TCH",  # flake8-type-checking (TCH)
    "INT",  # flake8-gettext (INT)
    "ARG",  # flake8-unused-arguments (ARG)
    "PTH",  # flake8-use-pathlib (PTH)
    "TD",   # flake8-todos (TD)
    "FIX",  # flake8-fixme (FIX)
    "ERA",  # eradicate (ERA)
    "PD",   # pandas-vet (PD)
    "PGH",  # pygrep-hooks (PGH)
    #  "PL",    # Pylint (PL) The horror! The horror!
    "TRY",  # tryceratops (TRY)
    "FLY",  # flynt (FLY)
    "NPY",  # NumPy-specific rules (NPY)
    "AIR",  # Airflow (AIR)
    "PERF", # Perflint (PERF)
    "FURB", # refurb (FURB)
    "LOG",  # flake8-logging (LOG)
    "RUF",  # Ruff-specific rules (RUF)
]

# The following is equivalent to --docstring-convention=pep8:
lint.extend-ignore = [
    "D203",
    "D212",
    "D213",
    "D214",
    "D215",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D409",
    "D410",
    "D411",
    "D413",
    "D415",
    "D416",
    "D417",
    "ANN101", # Missing type annotation for `self` in method. https://peps.python.org/pep-0673/
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in annotations.
    "UP009",  # UTF-8 encoding declaration is unnecessary
    "INP001", # pytest does not want an __init__.py file.
]
# Always autofix, but never try to fix `F401` (unused imports).
#fix = true
lint.unfixable = [
    "F401", # imported but unused.
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
lint.per-file-ignores = { "test_**.py" = ["D100", "D103", "S101", "ANN"] }

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.flakeheaven]
format = "grouped"
max_line_length = 7.9

[tool.flakeheaven.plugins]
dlint = ["+*"]
# flake8-bandit = ["+*"]
flake8-black = ["+*"]
flake8-comprehensions = ["+*"]
flake8-debugger = ["+*"]
flake8-fixme = ["+*"]
flake8-isort = ["+*"]
flake8-mock = ["+*"]
# flake8-noqa = ["+*"]
flake8-pytest-style = ["+*"]
flake8-secure-coding-standard = ["+*"]
flake8-simplify = ["+*"]
flake8-warnings = ["+*"]

# Match by glob.
[tool.flakeheaven.exceptions."**/test_*.py"]
flake8-secure-coding-standard = ["-SCS108"]
